name: Deploy Telegram Bot

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - production
          - staging
          - dev
  push:
    branches: [main, staging, develop]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      
      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      
      - name: Run Tests
        run: nix run .#test
      
      - name: Setup SSH
        run: |
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          
      - name: Setup Remote Environment
        env:
          SSH_OPTS: "-i private_key -o StrictHostKeyChecking=no"
          REMOTE: "${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}"
        run: |
          ssh $SSH_OPTS $REMOTE "sudo useradd -m telegram-bot || echo 'User already exists'"
          ssh $SSH_OPTS $REMOTE "sudo mkdir -p /etc/telegram-bot"
          ssh $SSH_OPTS $REMOTE "sudo tee /etc/telegram-bot/.env" << 'EOF'
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          POLLING_INTERVAL=3.0
          LOG_LEVEL=INFO
          EOF
          ssh $SSH_OPTS $REMOTE "sudo chmod 600 /etc/telegram-bot/.env"
          ssh $SSH_OPTS $REMOTE "sudo chown telegram-bot:telegram-bot /etc/telegram-bot/.env"
      
      - name: Copy Bot Binary
        env:
          SSH_OPTS: "-i private_key -o StrictHostKeyChecking=no"
          REMOTE: "${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}"
        run: |
          export NIX_SSH_OPTS="$SSH_OPTS"
          nix copy --to ssh://$REMOTE .#telegram-bot
      
      - name: Setup and Start Service
        env:
          SSH_OPTS: "-i private_key -o StrictHostKeyChecking=no"
          REMOTE: "${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}"
        run: |
          nix eval --json .#serviceConfig | ssh $SSH_OPTS $REMOTE "sudo tee /etc/systemd/system/telegram-bot.service"
          ssh $SSH_OPTS $REMOTE "sudo systemctl daemon-reload && sudo systemctl restart telegram-bot"