name: Deploy Telegram Bot

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - production
          - staging
          - dev
  push:
    branches:
      - main
      - staging
      - develop
    paths:
      - 'telegram-bot/**'
      - '.github/workflows/deploy.yml'

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          
      - name: Install dependencies
        working-directory: ./telegram-bot
        run: poetry install
        
      - name: Run tests
        working-directory: ./telegram-bot
        run: poetry run pytest
        
      - name: Build deployment package
        working-directory: ./telegram-bot
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          zip -r deployment.zip . -x "*.git*" -x "*.pytest_cache*" -x "*__pycache__*" -x "*.env*"
          
      - name: Deploy to AWS EC2
        env:
          PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.AWS_HOST }}
          USERNAME: ${{ secrets.AWS_USERNAME }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          POLLING_INTERVAL: '3.0'
          LOG_LEVEL: 'INFO'
        run: |
          # Write the private key to a file
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Copy files to server
          scp -i private_key.pem -o StrictHostKeyChecking=no ./telegram-bot/deployment.zip $USERNAME@$HOST:~/
          
          # Deploy commands
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USERNAME@$HOST << EOF
            set -e # Exit on error
            
            echo "Stopping existing service..."
            sudo systemctl stop telegram-bot || true
            
            echo "Cleaning up previous deployment..."
            rm -rf ~/telegram-bot
            mkdir -p ~/telegram-bot
            
            echo "Extracting new deployment..."
            unzip -o ~/deployment.zip -d ~/telegram-bot
            rm ~/deployment.zip
            
            echo "Creating .env file..."
            cat > ~/telegram-bot/.env << ENVFILE
              TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
              POLLING_INTERVAL=${POLLING_INTERVAL}
              LOG_LEVEL=${LOG_LEVEL}
            ENVFILE
            
            echo "Installing pip if needed..."
            sudo apt-get update
            sudo apt-get install -y python3-pip
            
            echo "Installing dependencies..."
            cd ~/telegram-bot
            python3 -m pip install --upgrade pip
            python3 -m pip install -r requirements.txt
            
            if [ ! -f deployment/telegram-bot.service ]; then
              echo "Error: Service file not found!"
              exit 1
            fi
            
            echo "Setting up service..."
            sudo cp deployment/telegram-bot.service /etc/systemd/system/
            
            echo "Starting service..."
            sudo systemctl daemon-reload
            sudo systemctl enable telegram-bot
            sudo systemctl start telegram-bot
            
            echo "Checking service status..."
            sudo systemctl status telegram-bot --no-pager
EOF