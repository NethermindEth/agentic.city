name: Deploy Telegram Bot

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - production
          - staging
          - dev
  push:
    branches:
      - main
      - staging
      - develop
    paths:
      - 'telegram-bot/**'
      - '.github/workflows/deploy.yml'

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Get Python version from pyproject.toml
        id: python-version
        run: |
          PYTHON_VERSION=$(grep "^python = " ./telegram-bot/pyproject.toml | sed -E 's/python = "\^([0-9]+\.[0-9]+).*/\1/')
          echo "version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.python-version.outputs.version }}
          
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          
      - name: Install dependencies (swarmer)
        working-directory: ./swarmer
        run: poetry install

      - name: Test swarmer
        working-directory: ./swarmer
        run: poetry run mypy --no-incremental swarmer/

      - name: Install dependencies (telegram-bot)
        working-directory: ./telegram-bot
        run: poetry install
        
      - name: Test telegram-bot
        working-directory: ./telegram-bot
        run: poetry run mypy --no-incremental telegram_bot/
        
      - name: Build deployment package
        working-directory: ./telegram-bot
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          zip -r deployment.zip . -x "*.git*" -x "*.pytest_cache*" -x "*__pycache__*" -x "*.env*"
          
      - name: Deploy to AWS EC2
        env:
          PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.AWS_HOST }}
          USERNAME: ${{ secrets.AWS_USERNAME }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          POLLING_INTERVAL: '3.0'
          LOG_LEVEL: 'INFO'
          ETH_RPC_URL: ${{ secrets.ETH_RPC_URL }}
          ADMIN_ID: ${{ secrets.ADMIN_ID }}
          KEYS_DIRECTORY: '/secure/keys'
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          AGENT_TOOLS_DIRECTORY: '/secure/agent_tools'

        run: |
          # Write the private key to a file
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Copy files to server
          scp -i private_key.pem -o StrictHostKeyChecking=no ./telegram-bot/deployment.zip $USERNAME@$HOST:~/
          
          # Deploy commands
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USERNAME@$HOST << EOF
            set -e # Exit on error
            
            echo "Stopping existing service..."
            sudo systemctl stop telegram-bot || true
            
            echo "Cleaning up previous deployment..."
            rm -rf ~/telegram-bot
            mkdir -p ~/telegram-bot
            
            echo "Extracting new deployment..."
            unzip -o ~/deployment.zip -d ~/telegram-bot
            rm ~/deployment.zip
            
            echo "Creating .env file..."
            echo "TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}" > ~/telegram-bot/.env
            echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> ~/telegram-bot/.env
            echo "POLLING_INTERVAL=${POLLING_INTERVAL}" >> ~/telegram-bot/.env
            echo "LOG_LEVEL=${LOG_LEVEL}" >> ~/telegram-bot/.env
            echo "ETH_RPC_URL=${ETH_RPC_URL}" >> ~/telegram-bot/.env
            echo "KEYS_DIRECTORY=${KEYS_DIRECTORY}" >> ~/telegram-bot/.env
            echo "AGENT_TOOLS_DIRECTORY=${AGENT_TOOLS_DIRECTORY}" >> ~/telegram-bot/.env
            echo "ADMIN_ID=${ADMIN_ID}" >> ~/telegram-bot/.env
            echo "SENTRY_DSN=${SENTRY_DSN}" >> ~/telegram-bot/.env
            
            echo "Setting up directories..."
            mkdir -p ~/telegram-bot/logs
            mkdir -p ~/telegram-bot/backups
            mkdir -p ~/telegram-bot/monitoring
            
            echo "Installing dependencies..."
            cd ~/telegram-bot
            python3.9 -m pip install --upgrade pip
            python3.9 -m pip install -r requirements.txt
            
            if [ ! -f deployment/telegram-bot.service ]; then
              echo "Error: Service file not found!"
              exit 1
            fi
            
            echo "Setting up service..."
            # Copy service file directly without modification
            sudo cp deployment/telegram-bot.service /etc/systemd/system/telegram-bot.service
            
            echo "Setting up backup cron job..."
            (crontab -l 2>/dev/null || true; echo "0 0 * * * ~/telegram-bot/scripts/backup.sh") | crontab -
            
            echo "Making scripts executable..."
            chmod +x ~/telegram-bot/scripts/*.sh
            
            echo "Starting service..."
            sudo systemctl daemon-reload
            sudo systemctl enable telegram-bot
            sudo systemctl start telegram-bot
            
            echo "Checking service status..."
            sudo systemctl status telegram-bot --no-pager
            
            # Create and secure directories
            sudo mkdir -p ${KEYS_DIRECTORY}
            sudo chown $USERNAME:$USERNAME ${KEYS_DIRECTORY}
            sudo chmod 700 ${KEYS_DIRECTORY}
            
            sudo chown -R $USERNAME:$USERNAME ~/telegram-bot/logs
            sudo chmod 755 ~/telegram-bot/logs
            
            sudo chown -R $USERNAME:$USERNAME ~/telegram-bot/backups
            sudo chmod 755 ~/telegram-bot/backups
            
            sudo chown -R $USERNAME:$USERNAME ~/telegram-bot/monitoring
            sudo chmod 755 ~/telegram-bot/monitoring

            sudo mkdir -p ${AGENT_TOOLS_DIRECTORY}
            sudo chown $USERNAME:$USERNAME ${AGENT_TOOLS_DIRECTORY}
            sudo chmod 700 ${AGENT_TOOLS_DIRECTORY}
          EOF